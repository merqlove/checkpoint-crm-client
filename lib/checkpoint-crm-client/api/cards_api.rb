=begin
#Checkpoint CRM API

#Checkpoint CRM API

The version of the OpenAPI document: v1
Contact: szhizhenko@sanatorium-is.ru
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.2

=end

require 'cgi'

module CheckpointCrmClient
  class CardsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List of loyalty cards. Each card bounds customer and his account. Several cards can be bound to same customer (customer own several accounts), at the same time several of them can be bound to same account (serveral family cards, for example)
    # @param data [Card] 
    # @param [Hash] opts the optional parameters
    # @return [Card]
    def cards_create(data, opts = {})
      data, _status_code, _headers = cards_create_with_http_info(data, opts)
      data
    end

    # List of loyalty cards. Each card bounds customer and his account. Several cards can be bound to same customer (customer own several accounts), at the same time several of them can be bound to same account (serveral family cards, for example)
    # @param data [Card] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Card, Integer, Hash)>] Card data, response status code and response headers
    def cards_create_with_http_info(data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.cards_create ...'
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling CardsApi.cards_create"
      end
      # resource path
      local_var_path = '/cards/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(data) 

      # return_type
      return_type = opts[:return_type] || 'Card' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#cards_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List of loyalty cards. Each card bounds customer and his account. Several cards can be bound to same customer (customer own several accounts), at the same time several of them can be bound to same account (serveral family cards, for example)
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def cards_delete(id, opts = {})
      cards_delete_with_http_info(id, opts)
      nil
    end

    # List of loyalty cards. Each card bounds customer and his account. Several cards can be bound to same customer (customer own several accounts), at the same time several of them can be bound to same account (serveral family cards, for example)
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def cards_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.cards_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CardsApi.cards_delete"
      end
      # resource path
      local_var_path = '/cards/{id}/'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#cards_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # \" Manual deposit bonus points to the customer or card.
    # @param data [Card] 
    # @param [Hash] opts the optional parameters
    # @return [Card]
    def cards_deposit(data, opts = {})
      data, _status_code, _headers = cards_deposit_with_http_info(data, opts)
      data
    end

    # \&quot; Manual deposit bonus points to the customer or card.
    # @param data [Card] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Card, Integer, Hash)>] Card data, response status code and response headers
    def cards_deposit_with_http_info(data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.cards_deposit ...'
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling CardsApi.cards_deposit"
      end
      # resource path
      local_var_path = '/cards/deposit/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(data) 

      # return_type
      return_type = opts[:return_type] || 'Card' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#cards_deposit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # \" Emit (create) new cards.
    # @param data [Card] 
    # @param [Hash] opts the optional parameters
    # @return [Card]
    def cards_emit(data, opts = {})
      data, _status_code, _headers = cards_emit_with_http_info(data, opts)
      data
    end

    # \&quot; Emit (create) new cards.
    # @param data [Card] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Card, Integer, Hash)>] Card data, response status code and response headers
    def cards_emit_with_http_info(data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.cards_emit ...'
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling CardsApi.cards_emit"
      end
      # resource path
      local_var_path = '/cards/emit/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(data) 

      # return_type
      return_type = opts[:return_type] || 'Card' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#cards_emit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List of loyalty cards. Each card bounds customer and his account. Several cards can be bound to same customer (customer own several accounts), at the same time several of them can be bound to same account (serveral family cards, for example)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A page number within the paginated result set.
    # @return [InlineResponse2002]
    def cards_list(opts = {})
      data, _status_code, _headers = cards_list_with_http_info(opts)
      data
    end

    # List of loyalty cards. Each card bounds customer and his account. Several cards can be bound to same customer (customer own several accounts), at the same time several of them can be bound to same account (serveral family cards, for example)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A page number within the paginated result set.
    # @return [Array<(InlineResponse2002, Integer, Hash)>] InlineResponse2002 data, response status code and response headers
    def cards_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.cards_list ...'
      end
      # resource path
      local_var_path = '/cards/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse2002' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#cards_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List of loyalty cards. Each card bounds customer and his account. Several cards can be bound to same customer (customer own several accounts), at the same time several of them can be bound to same account (serveral family cards, for example)
    # @param id [String] 
    # @param data [Card] 
    # @param [Hash] opts the optional parameters
    # @return [Card]
    def cards_partial_update(id, data, opts = {})
      data, _status_code, _headers = cards_partial_update_with_http_info(id, data, opts)
      data
    end

    # List of loyalty cards. Each card bounds customer and his account. Several cards can be bound to same customer (customer own several accounts), at the same time several of them can be bound to same account (serveral family cards, for example)
    # @param id [String] 
    # @param data [Card] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Card, Integer, Hash)>] Card data, response status code and response headers
    def cards_partial_update_with_http_info(id, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.cards_partial_update ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CardsApi.cards_partial_update"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling CardsApi.cards_partial_update"
      end
      # resource path
      local_var_path = '/cards/{id}/'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(data) 

      # return_type
      return_type = opts[:return_type] || 'Card' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#cards_partial_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List of loyalty cards. Each card bounds customer and his account. Several cards can be bound to same customer (customer own several accounts), at the same time several of them can be bound to same account (serveral family cards, for example)
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Card]
    def cards_read(id, opts = {})
      data, _status_code, _headers = cards_read_with_http_info(id, opts)
      data
    end

    # List of loyalty cards. Each card bounds customer and his account. Several cards can be bound to same customer (customer own several accounts), at the same time several of them can be bound to same account (serveral family cards, for example)
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Card, Integer, Hash)>] Card data, response status code and response headers
    def cards_read_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.cards_read ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CardsApi.cards_read"
      end
      # resource path
      local_var_path = '/cards/{id}/'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Card' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#cards_read\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List of loyalty cards. Each card bounds customer and his account. Several cards can be bound to same customer (customer own several accounts), at the same time several of them can be bound to same account (serveral family cards, for example)
    # @param id [String] 
    # @param data [Card] 
    # @param [Hash] opts the optional parameters
    # @return [Card]
    def cards_update(id, data, opts = {})
      data, _status_code, _headers = cards_update_with_http_info(id, data, opts)
      data
    end

    # List of loyalty cards. Each card bounds customer and his account. Several cards can be bound to same customer (customer own several accounts), at the same time several of them can be bound to same account (serveral family cards, for example)
    # @param id [String] 
    # @param data [Card] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Card, Integer, Hash)>] Card data, response status code and response headers
    def cards_update_with_http_info(id, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.cards_update ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CardsApi.cards_update"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling CardsApi.cards_update"
      end
      # resource path
      local_var_path = '/cards/{id}/'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(data) 

      # return_type
      return_type = opts[:return_type] || 'Card' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#cards_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
