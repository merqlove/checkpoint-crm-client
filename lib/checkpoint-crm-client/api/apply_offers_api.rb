=begin
#Checkpoint CRM API

#Checkpoint CRM API

The version of the OpenAPI document: v1
Contact: szhizhenko@sanatorium-is.ru
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.2

=end

require 'cgi'

module CheckpointCrmClient
  class ApplyOffersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Applies specified list of promo-offers to order. This fact will be registered on server to respect promo-offer application limits. If no list of offers provided, all auto-applicable promo offers will be applied
    # @param data [ApplyOffers] 
    # @param [Hash] opts the optional parameters
    # @return [ApplyOffers]
    def apply_offers_create(data, opts = {})
      data, _status_code, _headers = apply_offers_create_with_http_info(data, opts)
      data
    end

    # Applies specified list of promo-offers to order. This fact will be registered on server to respect promo-offer application limits. If no list of offers provided, all auto-applicable promo offers will be applied
    # @param data [ApplyOffers] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplyOffers, Integer, Hash)>] ApplyOffers data, response status code and response headers
    def apply_offers_create_with_http_info(data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplyOffersApi.apply_offers_create ...'
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling ApplyOffersApi.apply_offers_create"
      end
      # resource path
      local_var_path = '/apply-offers/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(data) 

      # return_type
      return_type = opts[:return_type] || 'ApplyOffers' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplyOffersApi#apply_offers_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Makes 'preview' version of order with applied promo-offer, but does not saves any changes and does not tracks offer application.
    # @param data [ApplyOffers] 
    # @param [Hash] opts the optional parameters
    # @return [ApplyOffers]
    def apply_offers_preview(data, opts = {})
      data, _status_code, _headers = apply_offers_preview_with_http_info(data, opts)
      data
    end

    # Makes &#39;preview&#39; version of order with applied promo-offer, but does not saves any changes and does not tracks offer application.
    # @param data [ApplyOffers] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplyOffers, Integer, Hash)>] ApplyOffers data, response status code and response headers
    def apply_offers_preview_with_http_info(data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplyOffersApi.apply_offers_preview ...'
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling ApplyOffersApi.apply_offers_preview"
      end
      # resource path
      local_var_path = '/apply-offers/preview/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(data) 

      # return_type
      return_type = opts[:return_type] || 'ApplyOffers' 

      # auth_names
      auth_names = opts[:auth_names] || ['Basic']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplyOffersApi#apply_offers_preview\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
