=begin
#Checkpoint CRM API

#Checkpoint CRM API

The version of the OpenAPI document: v1
Contact: szhizhenko@sanatorium-is.ru
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.2

=end

require 'date'

module CheckpointCrmClient
  class Order
    attr_accessor :id

    attr_accessor :point_of_sale_id

    attr_accessor :pos_code

    attr_accessor :customer

    attr_accessor :customer_id

    attr_accessor :card_id

    attr_accessor :card_no

    attr_accessor :promo_code

    attr_accessor :name

    attr_accessor :notes

    # booking, medical history etc.
    attr_accessor :type

    attr_accessor :date_start

    attr_accessor :date_end

    attr_accessor :external_id

    attr_accessor :items

    attr_accessor :payments

    attr_accessor :status

    attr_accessor :extra_fields

    attr_accessor :url

    attr_accessor :market_source

    attr_accessor :market_segment

    attr_accessor :market_geo_code

    attr_accessor :market_track_code

    attr_accessor :market_open_code

    attr_accessor :market_extra_1

    attr_accessor :market_extra_2

    attr_accessor :date_created

    attr_accessor :date_modified

    attr_accessor :ext_date_created

    attr_accessor :ext_date_modified

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'point_of_sale_id' => :'point_of_sale_id',
        :'pos_code' => :'pos_code',
        :'customer' => :'customer',
        :'customer_id' => :'customer_id',
        :'card_id' => :'card_id',
        :'card_no' => :'card_no',
        :'promo_code' => :'promo_code',
        :'name' => :'name',
        :'notes' => :'notes',
        :'type' => :'type',
        :'date_start' => :'date_start',
        :'date_end' => :'date_end',
        :'external_id' => :'external_id',
        :'items' => :'items',
        :'payments' => :'payments',
        :'status' => :'status',
        :'extra_fields' => :'extra_fields',
        :'url' => :'url',
        :'market_source' => :'market_source',
        :'market_segment' => :'market_segment',
        :'market_geo_code' => :'market_geo_code',
        :'market_track_code' => :'market_track_code',
        :'market_open_code' => :'market_open_code',
        :'market_extra_1' => :'market_extra_1',
        :'market_extra_2' => :'market_extra_2',
        :'date_created' => :'date_created',
        :'date_modified' => :'date_modified',
        :'ext_date_created' => :'ext_date_created',
        :'ext_date_modified' => :'ext_date_modified'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'point_of_sale_id' => :'String',
        :'pos_code' => :'String',
        :'customer' => :'CustomerList',
        :'customer_id' => :'Integer',
        :'card_id' => :'Integer',
        :'card_no' => :'String',
        :'promo_code' => :'String',
        :'name' => :'String',
        :'notes' => :'String',
        :'type' => :'String',
        :'date_start' => :'DateTime',
        :'date_end' => :'DateTime',
        :'external_id' => :'String',
        :'items' => :'Array<OrderItem>',
        :'payments' => :'Array<Payment>',
        :'status' => :'String',
        :'extra_fields' => :'Array<ExtraFields>',
        :'url' => :'String',
        :'market_source' => :'String',
        :'market_segment' => :'String',
        :'market_geo_code' => :'String',
        :'market_track_code' => :'String',
        :'market_open_code' => :'String',
        :'market_extra_1' => :'String',
        :'market_extra_2' => :'String',
        :'date_created' => :'DateTime',
        :'date_modified' => :'DateTime',
        :'ext_date_created' => :'DateTime',
        :'ext_date_modified' => :'DateTime'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `CheckpointCrmClient::Order` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `CheckpointCrmClient::Order`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'point_of_sale_id')
        self.point_of_sale_id = attributes[:'point_of_sale_id']
      end

      if attributes.key?(:'pos_code')
        self.pos_code = attributes[:'pos_code']
      end

      if attributes.key?(:'customer')
        self.customer = attributes[:'customer']
      end

      if attributes.key?(:'customer_id')
        self.customer_id = attributes[:'customer_id']
      end

      if attributes.key?(:'card_id')
        self.card_id = attributes[:'card_id']
      end

      if attributes.key?(:'card_no')
        self.card_no = attributes[:'card_no']
      end

      if attributes.key?(:'promo_code')
        self.promo_code = attributes[:'promo_code']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'notes')
        self.notes = attributes[:'notes']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'date_start')
        self.date_start = attributes[:'date_start']
      end

      if attributes.key?(:'date_end')
        self.date_end = attributes[:'date_end']
      end

      if attributes.key?(:'external_id')
        self.external_id = attributes[:'external_id']
      end

      if attributes.key?(:'items')
        if (value = attributes[:'items']).is_a?(Array)
          self.items = value
        end
      end

      if attributes.key?(:'payments')
        if (value = attributes[:'payments']).is_a?(Array)
          self.payments = value
        end
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'extra_fields')
        if (value = attributes[:'extra_fields']).is_a?(Array)
          self.extra_fields = value
        end
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'market_source')
        self.market_source = attributes[:'market_source']
      end

      if attributes.key?(:'market_segment')
        self.market_segment = attributes[:'market_segment']
      end

      if attributes.key?(:'market_geo_code')
        self.market_geo_code = attributes[:'market_geo_code']
      end

      if attributes.key?(:'market_track_code')
        self.market_track_code = attributes[:'market_track_code']
      end

      if attributes.key?(:'market_open_code')
        self.market_open_code = attributes[:'market_open_code']
      end

      if attributes.key?(:'market_extra_1')
        self.market_extra_1 = attributes[:'market_extra_1']
      end

      if attributes.key?(:'market_extra_2')
        self.market_extra_2 = attributes[:'market_extra_2']
      end

      if attributes.key?(:'date_created')
        self.date_created = attributes[:'date_created']
      end

      if attributes.key?(:'date_modified')
        self.date_modified = attributes[:'date_modified']
      end

      if attributes.key?(:'ext_date_created')
        self.ext_date_created = attributes[:'ext_date_created']
      end

      if attributes.key?(:'ext_date_modified')
        self.ext_date_modified = attributes[:'ext_date_modified']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@pos_code.nil? && @pos_code.to_s.length < 1
        invalid_properties.push('invalid value for "pos_code", the character length must be great than or equal to 1.')
      end

      if !@card_no.nil? && @card_no.to_s.length > 128
        invalid_properties.push('invalid value for "card_no", the character length must be smaller than or equal to 128.')
      end

      if !@card_no.nil? && @card_no.to_s.length < 1
        invalid_properties.push('invalid value for "card_no", the character length must be great than or equal to 1.')
      end

      if !@promo_code.nil? && @promo_code.to_s.length > 64
        invalid_properties.push('invalid value for "promo_code", the character length must be smaller than or equal to 64.')
      end

      if !@name.nil? && @name.to_s.length > 256
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 256.')
      end

      if !@type.nil? && @type.to_s.length > 256
        invalid_properties.push('invalid value for "type", the character length must be smaller than or equal to 256.')
      end

      if @date_start.nil?
        invalid_properties.push('invalid value for "date_start", date_start cannot be nil.')
      end

      if @external_id.nil?
        invalid_properties.push('invalid value for "external_id", external_id cannot be nil.')
      end

      if @external_id.to_s.length > 64
        invalid_properties.push('invalid value for "external_id", the character length must be smaller than or equal to 64.')
      end

      if @external_id.to_s.length < 1
        invalid_properties.push('invalid value for "external_id", the character length must be great than or equal to 1.')
      end

      if !@market_source.nil? && @market_source.to_s.length > 64
        invalid_properties.push('invalid value for "market_source", the character length must be smaller than or equal to 64.')
      end

      if !@market_segment.nil? && @market_segment.to_s.length > 64
        invalid_properties.push('invalid value for "market_segment", the character length must be smaller than or equal to 64.')
      end

      if !@market_geo_code.nil? && @market_geo_code.to_s.length > 64
        invalid_properties.push('invalid value for "market_geo_code", the character length must be smaller than or equal to 64.')
      end

      if !@market_track_code.nil? && @market_track_code.to_s.length > 64
        invalid_properties.push('invalid value for "market_track_code", the character length must be smaller than or equal to 64.')
      end

      if !@market_open_code.nil? && @market_open_code.to_s.length > 64
        invalid_properties.push('invalid value for "market_open_code", the character length must be smaller than or equal to 64.')
      end

      if !@market_extra_1.nil? && @market_extra_1.to_s.length > 64
        invalid_properties.push('invalid value for "market_extra_1", the character length must be smaller than or equal to 64.')
      end

      if !@market_extra_2.nil? && @market_extra_2.to_s.length > 64
        invalid_properties.push('invalid value for "market_extra_2", the character length must be smaller than or equal to 64.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@pos_code.nil? && @pos_code.to_s.length < 1
      return false if !@card_no.nil? && @card_no.to_s.length > 128
      return false if !@card_no.nil? && @card_no.to_s.length < 1
      return false if !@promo_code.nil? && @promo_code.to_s.length > 64
      return false if !@name.nil? && @name.to_s.length > 256
      return false if !@type.nil? && @type.to_s.length > 256
      return false if @date_start.nil?
      return false if @external_id.nil?
      return false if @external_id.to_s.length > 64
      return false if @external_id.to_s.length < 1
      status_validator = EnumAttributeValidator.new('String', ["ADV", "PROG", "COMPL", "CANC"])
      return false unless status_validator.valid?(@status)
      return false if !@market_source.nil? && @market_source.to_s.length > 64
      return false if !@market_segment.nil? && @market_segment.to_s.length > 64
      return false if !@market_geo_code.nil? && @market_geo_code.to_s.length > 64
      return false if !@market_track_code.nil? && @market_track_code.to_s.length > 64
      return false if !@market_open_code.nil? && @market_open_code.to_s.length > 64
      return false if !@market_extra_1.nil? && @market_extra_1.to_s.length > 64
      return false if !@market_extra_2.nil? && @market_extra_2.to_s.length > 64
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] pos_code Value to be assigned
    def pos_code=(pos_code)
      if !pos_code.nil? && pos_code.to_s.length < 1
        fail ArgumentError, 'invalid value for "pos_code", the character length must be great than or equal to 1.'
      end

      @pos_code = pos_code
    end

    # Custom attribute writer method with validation
    # @param [Object] card_no Value to be assigned
    def card_no=(card_no)
      if !card_no.nil? && card_no.to_s.length > 128
        fail ArgumentError, 'invalid value for "card_no", the character length must be smaller than or equal to 128.'
      end

      if !card_no.nil? && card_no.to_s.length < 1
        fail ArgumentError, 'invalid value for "card_no", the character length must be great than or equal to 1.'
      end

      @card_no = card_no
    end

    # Custom attribute writer method with validation
    # @param [Object] promo_code Value to be assigned
    def promo_code=(promo_code)
      if !promo_code.nil? && promo_code.to_s.length > 64
        fail ArgumentError, 'invalid value for "promo_code", the character length must be smaller than or equal to 64.'
      end

      @promo_code = promo_code
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if !name.nil? && name.to_s.length > 256
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 256.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] type Value to be assigned
    def type=(type)
      if !type.nil? && type.to_s.length > 256
        fail ArgumentError, 'invalid value for "type", the character length must be smaller than or equal to 256.'
      end

      @type = type
    end

    # Custom attribute writer method with validation
    # @param [Object] external_id Value to be assigned
    def external_id=(external_id)
      if external_id.nil?
        fail ArgumentError, 'external_id cannot be nil'
      end

      if external_id.to_s.length > 64
        fail ArgumentError, 'invalid value for "external_id", the character length must be smaller than or equal to 64.'
      end

      if external_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "external_id", the character length must be great than or equal to 1.'
      end

      @external_id = external_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["ADV", "PROG", "COMPL", "CANC"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] market_source Value to be assigned
    def market_source=(market_source)
      if !market_source.nil? && market_source.to_s.length > 64
        fail ArgumentError, 'invalid value for "market_source", the character length must be smaller than or equal to 64.'
      end

      @market_source = market_source
    end

    # Custom attribute writer method with validation
    # @param [Object] market_segment Value to be assigned
    def market_segment=(market_segment)
      if !market_segment.nil? && market_segment.to_s.length > 64
        fail ArgumentError, 'invalid value for "market_segment", the character length must be smaller than or equal to 64.'
      end

      @market_segment = market_segment
    end

    # Custom attribute writer method with validation
    # @param [Object] market_geo_code Value to be assigned
    def market_geo_code=(market_geo_code)
      if !market_geo_code.nil? && market_geo_code.to_s.length > 64
        fail ArgumentError, 'invalid value for "market_geo_code", the character length must be smaller than or equal to 64.'
      end

      @market_geo_code = market_geo_code
    end

    # Custom attribute writer method with validation
    # @param [Object] market_track_code Value to be assigned
    def market_track_code=(market_track_code)
      if !market_track_code.nil? && market_track_code.to_s.length > 64
        fail ArgumentError, 'invalid value for "market_track_code", the character length must be smaller than or equal to 64.'
      end

      @market_track_code = market_track_code
    end

    # Custom attribute writer method with validation
    # @param [Object] market_open_code Value to be assigned
    def market_open_code=(market_open_code)
      if !market_open_code.nil? && market_open_code.to_s.length > 64
        fail ArgumentError, 'invalid value for "market_open_code", the character length must be smaller than or equal to 64.'
      end

      @market_open_code = market_open_code
    end

    # Custom attribute writer method with validation
    # @param [Object] market_extra_1 Value to be assigned
    def market_extra_1=(market_extra_1)
      if !market_extra_1.nil? && market_extra_1.to_s.length > 64
        fail ArgumentError, 'invalid value for "market_extra_1", the character length must be smaller than or equal to 64.'
      end

      @market_extra_1 = market_extra_1
    end

    # Custom attribute writer method with validation
    # @param [Object] market_extra_2 Value to be assigned
    def market_extra_2=(market_extra_2)
      if !market_extra_2.nil? && market_extra_2.to_s.length > 64
        fail ArgumentError, 'invalid value for "market_extra_2", the character length must be smaller than or equal to 64.'
      end

      @market_extra_2 = market_extra_2
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          point_of_sale_id == o.point_of_sale_id &&
          pos_code == o.pos_code &&
          customer == o.customer &&
          customer_id == o.customer_id &&
          card_id == o.card_id &&
          card_no == o.card_no &&
          promo_code == o.promo_code &&
          name == o.name &&
          notes == o.notes &&
          type == o.type &&
          date_start == o.date_start &&
          date_end == o.date_end &&
          external_id == o.external_id &&
          items == o.items &&
          payments == o.payments &&
          status == o.status &&
          extra_fields == o.extra_fields &&
          url == o.url &&
          market_source == o.market_source &&
          market_segment == o.market_segment &&
          market_geo_code == o.market_geo_code &&
          market_track_code == o.market_track_code &&
          market_open_code == o.market_open_code &&
          market_extra_1 == o.market_extra_1 &&
          market_extra_2 == o.market_extra_2 &&
          date_created == o.date_created &&
          date_modified == o.date_modified &&
          ext_date_created == o.ext_date_created &&
          ext_date_modified == o.ext_date_modified
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, point_of_sale_id, pos_code, customer, customer_id, card_id, card_no, promo_code, name, notes, type, date_start, date_end, external_id, items, payments, status, extra_fields, url, market_source, market_segment, market_geo_code, market_track_code, market_open_code, market_extra_1, market_extra_2, date_created, date_modified, ext_date_created, ext_date_modified].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        CheckpointCrmClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
