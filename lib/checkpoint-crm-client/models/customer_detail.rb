=begin
#Checkpoint CRM API

#Checkpoint CRM API

The version of the OpenAPI document: v1
Contact: szhizhenko@sanatorium-is.ru
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.2

=end

require 'date'

module CheckpointCrmClient
  class CustomerDetail
    attr_accessor :id

    attr_accessor :url

    attr_accessor :external_id

    attr_accessor :first_name

    attr_accessor :last_name

    attr_accessor :middle_name

    attr_accessor :birth_date

    attr_accessor :gender

    attr_accessor :language

    attr_accessor :phone

    attr_accessor :allow_phone_contact

    attr_accessor :email

    attr_accessor :allow_email_contact

    attr_accessor :notes

    attr_accessor :date_created

    attr_accessor :date_modified

    attr_accessor :ext_date_created

    attr_accessor :ext_date_modified

    attr_accessor :doc_type

    attr_accessor :doc_issuer_info

    attr_accessor :doc_series

    attr_accessor :doc_number

    attr_accessor :department_code

    attr_accessor :department_name

    attr_accessor :doc_issue_date

    attr_accessor :doc_expiration_date

    attr_accessor :is_closed

    attr_accessor :merged_to

    attr_accessor :building_no

    attr_accessor :city

    attr_accessor :country_code

    attr_accessor :country_name

    attr_accessor :district

    attr_accessor :flat_no

    attr_accessor :house_no

    attr_accessor :region

    attr_accessor :room_no

    attr_accessor :settlement_type

    attr_accessor :street

    attr_accessor :raw_address

    attr_accessor :cards

    attr_accessor :view_url

    attr_accessor :preferences

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'url' => :'url',
        :'external_id' => :'external_id',
        :'first_name' => :'first_name',
        :'last_name' => :'last_name',
        :'middle_name' => :'middle_name',
        :'birth_date' => :'birth_date',
        :'gender' => :'gender',
        :'language' => :'language',
        :'phone' => :'phone',
        :'allow_phone_contact' => :'allow_phone_contact',
        :'email' => :'email',
        :'allow_email_contact' => :'allow_email_contact',
        :'notes' => :'notes',
        :'date_created' => :'date_created',
        :'date_modified' => :'date_modified',
        :'ext_date_created' => :'ext_date_created',
        :'ext_date_modified' => :'ext_date_modified',
        :'doc_type' => :'doc_type',
        :'doc_issuer_info' => :'doc_issuer_info',
        :'doc_series' => :'doc_series',
        :'doc_number' => :'doc_number',
        :'department_code' => :'department_code',
        :'department_name' => :'department_name',
        :'doc_issue_date' => :'doc_issue_date',
        :'doc_expiration_date' => :'doc_expiration_date',
        :'is_closed' => :'is_closed',
        :'merged_to' => :'merged_to',
        :'building_no' => :'building_no',
        :'city' => :'city',
        :'country_code' => :'country_code',
        :'country_name' => :'country_name',
        :'district' => :'district',
        :'flat_no' => :'flat_no',
        :'house_no' => :'house_no',
        :'region' => :'region',
        :'room_no' => :'room_no',
        :'settlement_type' => :'settlement_type',
        :'street' => :'street',
        :'raw_address' => :'raw_address',
        :'cards' => :'cards',
        :'view_url' => :'view_url',
        :'preferences' => :'preferences'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'url' => :'String',
        :'external_id' => :'String',
        :'first_name' => :'String',
        :'last_name' => :'String',
        :'middle_name' => :'String',
        :'birth_date' => :'Date',
        :'gender' => :'String',
        :'language' => :'String',
        :'phone' => :'String',
        :'allow_phone_contact' => :'Boolean',
        :'email' => :'String',
        :'allow_email_contact' => :'Boolean',
        :'notes' => :'String',
        :'date_created' => :'DateTime',
        :'date_modified' => :'DateTime',
        :'ext_date_created' => :'DateTime',
        :'ext_date_modified' => :'DateTime',
        :'doc_type' => :'String',
        :'doc_issuer_info' => :'String',
        :'doc_series' => :'String',
        :'doc_number' => :'String',
        :'department_code' => :'String',
        :'department_name' => :'String',
        :'doc_issue_date' => :'Date',
        :'doc_expiration_date' => :'Date',
        :'is_closed' => :'Boolean',
        :'merged_to' => :'Integer',
        :'building_no' => :'String',
        :'city' => :'String',
        :'country_code' => :'String',
        :'country_name' => :'String',
        :'district' => :'String',
        :'flat_no' => :'String',
        :'house_no' => :'String',
        :'region' => :'String',
        :'room_no' => :'String',
        :'settlement_type' => :'String',
        :'street' => :'String',
        :'raw_address' => :'String',
        :'cards' => :'Array<CardForCustomer>',
        :'view_url' => :'String',
        :'preferences' => :'Array<CustomerPreferenceForCustomer>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `CheckpointCrmClient::CustomerDetail` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `CheckpointCrmClient::CustomerDetail`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'external_id')
        self.external_id = attributes[:'external_id']
      end

      if attributes.key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.key?(:'middle_name')
        self.middle_name = attributes[:'middle_name']
      end

      if attributes.key?(:'birth_date')
        self.birth_date = attributes[:'birth_date']
      end

      if attributes.key?(:'gender')
        self.gender = attributes[:'gender']
      end

      if attributes.key?(:'language')
        self.language = attributes[:'language']
      end

      if attributes.key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.key?(:'allow_phone_contact')
        self.allow_phone_contact = attributes[:'allow_phone_contact']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'allow_email_contact')
        self.allow_email_contact = attributes[:'allow_email_contact']
      end

      if attributes.key?(:'notes')
        self.notes = attributes[:'notes']
      end

      if attributes.key?(:'date_created')
        self.date_created = attributes[:'date_created']
      end

      if attributes.key?(:'date_modified')
        self.date_modified = attributes[:'date_modified']
      end

      if attributes.key?(:'ext_date_created')
        self.ext_date_created = attributes[:'ext_date_created']
      end

      if attributes.key?(:'ext_date_modified')
        self.ext_date_modified = attributes[:'ext_date_modified']
      end

      if attributes.key?(:'doc_type')
        self.doc_type = attributes[:'doc_type']
      end

      if attributes.key?(:'doc_issuer_info')
        self.doc_issuer_info = attributes[:'doc_issuer_info']
      end

      if attributes.key?(:'doc_series')
        self.doc_series = attributes[:'doc_series']
      end

      if attributes.key?(:'doc_number')
        self.doc_number = attributes[:'doc_number']
      end

      if attributes.key?(:'department_code')
        self.department_code = attributes[:'department_code']
      end

      if attributes.key?(:'department_name')
        self.department_name = attributes[:'department_name']
      end

      if attributes.key?(:'doc_issue_date')
        self.doc_issue_date = attributes[:'doc_issue_date']
      end

      if attributes.key?(:'doc_expiration_date')
        self.doc_expiration_date = attributes[:'doc_expiration_date']
      end

      if attributes.key?(:'is_closed')
        self.is_closed = attributes[:'is_closed']
      end

      if attributes.key?(:'merged_to')
        self.merged_to = attributes[:'merged_to']
      end

      if attributes.key?(:'building_no')
        self.building_no = attributes[:'building_no']
      end

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'country_code')
        self.country_code = attributes[:'country_code']
      end

      if attributes.key?(:'country_name')
        self.country_name = attributes[:'country_name']
      end

      if attributes.key?(:'district')
        self.district = attributes[:'district']
      end

      if attributes.key?(:'flat_no')
        self.flat_no = attributes[:'flat_no']
      end

      if attributes.key?(:'house_no')
        self.house_no = attributes[:'house_no']
      end

      if attributes.key?(:'region')
        self.region = attributes[:'region']
      end

      if attributes.key?(:'room_no')
        self.room_no = attributes[:'room_no']
      end

      if attributes.key?(:'settlement_type')
        self.settlement_type = attributes[:'settlement_type']
      end

      if attributes.key?(:'street')
        self.street = attributes[:'street']
      end

      if attributes.key?(:'raw_address')
        self.raw_address = attributes[:'raw_address']
      end

      if attributes.key?(:'cards')
        if (value = attributes[:'cards']).is_a?(Array)
          self.cards = value
        end
      end

      if attributes.key?(:'view_url')
        self.view_url = attributes[:'view_url']
      end

      if attributes.key?(:'preferences')
        if (value = attributes[:'preferences']).is_a?(Array)
          self.preferences = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@external_id.nil? && @external_id.to_s.length > 64
        invalid_properties.push('invalid value for "external_id", the character length must be smaller than or equal to 64.')
      end

      if !@first_name.nil? && @first_name.to_s.length > 128
        invalid_properties.push('invalid value for "first_name", the character length must be smaller than or equal to 128.')
      end

      if @last_name.nil?
        invalid_properties.push('invalid value for "last_name", last_name cannot be nil.')
      end

      if @last_name.to_s.length > 64
        invalid_properties.push('invalid value for "last_name", the character length must be smaller than or equal to 64.')
      end

      if @last_name.to_s.length < 1
        invalid_properties.push('invalid value for "last_name", the character length must be great than or equal to 1.')
      end

      if !@middle_name.nil? && @middle_name.to_s.length > 64
        invalid_properties.push('invalid value for "middle_name", the character length must be smaller than or equal to 64.')
      end

      if !@language.nil? && @language.to_s.length > 32
        invalid_properties.push('invalid value for "language", the character length must be smaller than or equal to 32.')
      end

      if !@phone.nil? && @phone.to_s.length > 64
        invalid_properties.push('invalid value for "phone", the character length must be smaller than or equal to 64.')
      end

      if !@email.nil? && @email.to_s.length > 128
        invalid_properties.push('invalid value for "email", the character length must be smaller than or equal to 128.')
      end

      if !@doc_type.nil? && @doc_type.to_s.length > 32
        invalid_properties.push('invalid value for "doc_type", the character length must be smaller than or equal to 32.')
      end

      if !@doc_issuer_info.nil? && @doc_issuer_info.to_s.length > 256
        invalid_properties.push('invalid value for "doc_issuer_info", the character length must be smaller than or equal to 256.')
      end

      if !@doc_series.nil? && @doc_series.to_s.length > 64
        invalid_properties.push('invalid value for "doc_series", the character length must be smaller than or equal to 64.')
      end

      if !@doc_number.nil? && @doc_number.to_s.length > 64
        invalid_properties.push('invalid value for "doc_number", the character length must be smaller than or equal to 64.')
      end

      if !@department_code.nil? && @department_code.to_s.length > 64
        invalid_properties.push('invalid value for "department_code", the character length must be smaller than or equal to 64.')
      end

      if !@department_name.nil? && @department_name.to_s.length > 256
        invalid_properties.push('invalid value for "department_name", the character length must be smaller than or equal to 256.')
      end

      if !@building_no.nil? && @building_no.to_s.length > 8
        invalid_properties.push('invalid value for "building_no", the character length must be smaller than or equal to 8.')
      end

      if !@city.nil? && @city.to_s.length > 32
        invalid_properties.push('invalid value for "city", the character length must be smaller than or equal to 32.')
      end

      if !@country_code.nil? && @country_code.to_s.length > 8
        invalid_properties.push('invalid value for "country_code", the character length must be smaller than or equal to 8.')
      end

      if !@country_name.nil? && @country_name.to_s.length > 64
        invalid_properties.push('invalid value for "country_name", the character length must be smaller than or equal to 64.')
      end

      if !@district.nil? && @district.to_s.length > 64
        invalid_properties.push('invalid value for "district", the character length must be smaller than or equal to 64.')
      end

      if !@flat_no.nil? && @flat_no.to_s.length > 8
        invalid_properties.push('invalid value for "flat_no", the character length must be smaller than or equal to 8.')
      end

      if !@house_no.nil? && @house_no.to_s.length > 16
        invalid_properties.push('invalid value for "house_no", the character length must be smaller than or equal to 16.')
      end

      if !@region.nil? && @region.to_s.length > 64
        invalid_properties.push('invalid value for "region", the character length must be smaller than or equal to 64.')
      end

      if !@room_no.nil? && @room_no.to_s.length > 8
        invalid_properties.push('invalid value for "room_no", the character length must be smaller than or equal to 8.')
      end

      if !@settlement_type.nil? && @settlement_type.to_s.length > 32
        invalid_properties.push('invalid value for "settlement_type", the character length must be smaller than or equal to 32.')
      end

      if !@street.nil? && @street.to_s.length > 64
        invalid_properties.push('invalid value for "street", the character length must be smaller than or equal to 64.')
      end

      if !@raw_address.nil? && @raw_address.to_s.length > 512
        invalid_properties.push('invalid value for "raw_address", the character length must be smaller than or equal to 512.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@external_id.nil? && @external_id.to_s.length > 64
      return false if !@first_name.nil? && @first_name.to_s.length > 128
      return false if @last_name.nil?
      return false if @last_name.to_s.length > 64
      return false if @last_name.to_s.length < 1
      return false if !@middle_name.nil? && @middle_name.to_s.length > 64
      gender_validator = EnumAttributeValidator.new('String', ["M", "F"])
      return false unless gender_validator.valid?(@gender)
      return false if !@language.nil? && @language.to_s.length > 32
      return false if !@phone.nil? && @phone.to_s.length > 64
      return false if !@email.nil? && @email.to_s.length > 128
      return false if !@doc_type.nil? && @doc_type.to_s.length > 32
      return false if !@doc_issuer_info.nil? && @doc_issuer_info.to_s.length > 256
      return false if !@doc_series.nil? && @doc_series.to_s.length > 64
      return false if !@doc_number.nil? && @doc_number.to_s.length > 64
      return false if !@department_code.nil? && @department_code.to_s.length > 64
      return false if !@department_name.nil? && @department_name.to_s.length > 256
      return false if !@building_no.nil? && @building_no.to_s.length > 8
      return false if !@city.nil? && @city.to_s.length > 32
      return false if !@country_code.nil? && @country_code.to_s.length > 8
      return false if !@country_name.nil? && @country_name.to_s.length > 64
      return false if !@district.nil? && @district.to_s.length > 64
      return false if !@flat_no.nil? && @flat_no.to_s.length > 8
      return false if !@house_no.nil? && @house_no.to_s.length > 16
      return false if !@region.nil? && @region.to_s.length > 64
      return false if !@room_no.nil? && @room_no.to_s.length > 8
      return false if !@settlement_type.nil? && @settlement_type.to_s.length > 32
      return false if !@street.nil? && @street.to_s.length > 64
      return false if !@raw_address.nil? && @raw_address.to_s.length > 512
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] external_id Value to be assigned
    def external_id=(external_id)
      if !external_id.nil? && external_id.to_s.length > 64
        fail ArgumentError, 'invalid value for "external_id", the character length must be smaller than or equal to 64.'
      end

      @external_id = external_id
    end

    # Custom attribute writer method with validation
    # @param [Object] first_name Value to be assigned
    def first_name=(first_name)
      if !first_name.nil? && first_name.to_s.length > 128
        fail ArgumentError, 'invalid value for "first_name", the character length must be smaller than or equal to 128.'
      end

      @first_name = first_name
    end

    # Custom attribute writer method with validation
    # @param [Object] last_name Value to be assigned
    def last_name=(last_name)
      if last_name.nil?
        fail ArgumentError, 'last_name cannot be nil'
      end

      if last_name.to_s.length > 64
        fail ArgumentError, 'invalid value for "last_name", the character length must be smaller than or equal to 64.'
      end

      if last_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "last_name", the character length must be great than or equal to 1.'
      end

      @last_name = last_name
    end

    # Custom attribute writer method with validation
    # @param [Object] middle_name Value to be assigned
    def middle_name=(middle_name)
      if !middle_name.nil? && middle_name.to_s.length > 64
        fail ArgumentError, 'invalid value for "middle_name", the character length must be smaller than or equal to 64.'
      end

      @middle_name = middle_name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] gender Object to be assigned
    def gender=(gender)
      validator = EnumAttributeValidator.new('String', ["M", "F"])
      unless validator.valid?(gender)
        fail ArgumentError, "invalid value for \"gender\", must be one of #{validator.allowable_values}."
      end
      @gender = gender
    end

    # Custom attribute writer method with validation
    # @param [Object] language Value to be assigned
    def language=(language)
      if !language.nil? && language.to_s.length > 32
        fail ArgumentError, 'invalid value for "language", the character length must be smaller than or equal to 32.'
      end

      @language = language
    end

    # Custom attribute writer method with validation
    # @param [Object] phone Value to be assigned
    def phone=(phone)
      if !phone.nil? && phone.to_s.length > 64
        fail ArgumentError, 'invalid value for "phone", the character length must be smaller than or equal to 64.'
      end

      @phone = phone
    end

    # Custom attribute writer method with validation
    # @param [Object] email Value to be assigned
    def email=(email)
      if !email.nil? && email.to_s.length > 128
        fail ArgumentError, 'invalid value for "email", the character length must be smaller than or equal to 128.'
      end

      @email = email
    end

    # Custom attribute writer method with validation
    # @param [Object] doc_type Value to be assigned
    def doc_type=(doc_type)
      if !doc_type.nil? && doc_type.to_s.length > 32
        fail ArgumentError, 'invalid value for "doc_type", the character length must be smaller than or equal to 32.'
      end

      @doc_type = doc_type
    end

    # Custom attribute writer method with validation
    # @param [Object] doc_issuer_info Value to be assigned
    def doc_issuer_info=(doc_issuer_info)
      if !doc_issuer_info.nil? && doc_issuer_info.to_s.length > 256
        fail ArgumentError, 'invalid value for "doc_issuer_info", the character length must be smaller than or equal to 256.'
      end

      @doc_issuer_info = doc_issuer_info
    end

    # Custom attribute writer method with validation
    # @param [Object] doc_series Value to be assigned
    def doc_series=(doc_series)
      if !doc_series.nil? && doc_series.to_s.length > 64
        fail ArgumentError, 'invalid value for "doc_series", the character length must be smaller than or equal to 64.'
      end

      @doc_series = doc_series
    end

    # Custom attribute writer method with validation
    # @param [Object] doc_number Value to be assigned
    def doc_number=(doc_number)
      if !doc_number.nil? && doc_number.to_s.length > 64
        fail ArgumentError, 'invalid value for "doc_number", the character length must be smaller than or equal to 64.'
      end

      @doc_number = doc_number
    end

    # Custom attribute writer method with validation
    # @param [Object] department_code Value to be assigned
    def department_code=(department_code)
      if !department_code.nil? && department_code.to_s.length > 64
        fail ArgumentError, 'invalid value for "department_code", the character length must be smaller than or equal to 64.'
      end

      @department_code = department_code
    end

    # Custom attribute writer method with validation
    # @param [Object] department_name Value to be assigned
    def department_name=(department_name)
      if !department_name.nil? && department_name.to_s.length > 256
        fail ArgumentError, 'invalid value for "department_name", the character length must be smaller than or equal to 256.'
      end

      @department_name = department_name
    end

    # Custom attribute writer method with validation
    # @param [Object] building_no Value to be assigned
    def building_no=(building_no)
      if !building_no.nil? && building_no.to_s.length > 8
        fail ArgumentError, 'invalid value for "building_no", the character length must be smaller than or equal to 8.'
      end

      @building_no = building_no
    end

    # Custom attribute writer method with validation
    # @param [Object] city Value to be assigned
    def city=(city)
      if !city.nil? && city.to_s.length > 32
        fail ArgumentError, 'invalid value for "city", the character length must be smaller than or equal to 32.'
      end

      @city = city
    end

    # Custom attribute writer method with validation
    # @param [Object] country_code Value to be assigned
    def country_code=(country_code)
      if !country_code.nil? && country_code.to_s.length > 8
        fail ArgumentError, 'invalid value for "country_code", the character length must be smaller than or equal to 8.'
      end

      @country_code = country_code
    end

    # Custom attribute writer method with validation
    # @param [Object] country_name Value to be assigned
    def country_name=(country_name)
      if !country_name.nil? && country_name.to_s.length > 64
        fail ArgumentError, 'invalid value for "country_name", the character length must be smaller than or equal to 64.'
      end

      @country_name = country_name
    end

    # Custom attribute writer method with validation
    # @param [Object] district Value to be assigned
    def district=(district)
      if !district.nil? && district.to_s.length > 64
        fail ArgumentError, 'invalid value for "district", the character length must be smaller than or equal to 64.'
      end

      @district = district
    end

    # Custom attribute writer method with validation
    # @param [Object] flat_no Value to be assigned
    def flat_no=(flat_no)
      if !flat_no.nil? && flat_no.to_s.length > 8
        fail ArgumentError, 'invalid value for "flat_no", the character length must be smaller than or equal to 8.'
      end

      @flat_no = flat_no
    end

    # Custom attribute writer method with validation
    # @param [Object] house_no Value to be assigned
    def house_no=(house_no)
      if !house_no.nil? && house_no.to_s.length > 16
        fail ArgumentError, 'invalid value for "house_no", the character length must be smaller than or equal to 16.'
      end

      @house_no = house_no
    end

    # Custom attribute writer method with validation
    # @param [Object] region Value to be assigned
    def region=(region)
      if !region.nil? && region.to_s.length > 64
        fail ArgumentError, 'invalid value for "region", the character length must be smaller than or equal to 64.'
      end

      @region = region
    end

    # Custom attribute writer method with validation
    # @param [Object] room_no Value to be assigned
    def room_no=(room_no)
      if !room_no.nil? && room_no.to_s.length > 8
        fail ArgumentError, 'invalid value for "room_no", the character length must be smaller than or equal to 8.'
      end

      @room_no = room_no
    end

    # Custom attribute writer method with validation
    # @param [Object] settlement_type Value to be assigned
    def settlement_type=(settlement_type)
      if !settlement_type.nil? && settlement_type.to_s.length > 32
        fail ArgumentError, 'invalid value for "settlement_type", the character length must be smaller than or equal to 32.'
      end

      @settlement_type = settlement_type
    end

    # Custom attribute writer method with validation
    # @param [Object] street Value to be assigned
    def street=(street)
      if !street.nil? && street.to_s.length > 64
        fail ArgumentError, 'invalid value for "street", the character length must be smaller than or equal to 64.'
      end

      @street = street
    end

    # Custom attribute writer method with validation
    # @param [Object] raw_address Value to be assigned
    def raw_address=(raw_address)
      if !raw_address.nil? && raw_address.to_s.length > 512
        fail ArgumentError, 'invalid value for "raw_address", the character length must be smaller than or equal to 512.'
      end

      @raw_address = raw_address
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          url == o.url &&
          external_id == o.external_id &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          middle_name == o.middle_name &&
          birth_date == o.birth_date &&
          gender == o.gender &&
          language == o.language &&
          phone == o.phone &&
          allow_phone_contact == o.allow_phone_contact &&
          email == o.email &&
          allow_email_contact == o.allow_email_contact &&
          notes == o.notes &&
          date_created == o.date_created &&
          date_modified == o.date_modified &&
          ext_date_created == o.ext_date_created &&
          ext_date_modified == o.ext_date_modified &&
          doc_type == o.doc_type &&
          doc_issuer_info == o.doc_issuer_info &&
          doc_series == o.doc_series &&
          doc_number == o.doc_number &&
          department_code == o.department_code &&
          department_name == o.department_name &&
          doc_issue_date == o.doc_issue_date &&
          doc_expiration_date == o.doc_expiration_date &&
          is_closed == o.is_closed &&
          merged_to == o.merged_to &&
          building_no == o.building_no &&
          city == o.city &&
          country_code == o.country_code &&
          country_name == o.country_name &&
          district == o.district &&
          flat_no == o.flat_no &&
          house_no == o.house_no &&
          region == o.region &&
          room_no == o.room_no &&
          settlement_type == o.settlement_type &&
          street == o.street &&
          raw_address == o.raw_address &&
          cards == o.cards &&
          view_url == o.view_url &&
          preferences == o.preferences
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, url, external_id, first_name, last_name, middle_name, birth_date, gender, language, phone, allow_phone_contact, email, allow_email_contact, notes, date_created, date_modified, ext_date_created, ext_date_modified, doc_type, doc_issuer_info, doc_series, doc_number, department_code, department_name, doc_issue_date, doc_expiration_date, is_closed, merged_to, building_no, city, country_code, country_name, district, flat_no, house_no, region, room_no, settlement_type, street, raw_address, cards, view_url, preferences].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        CheckpointCrmClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
