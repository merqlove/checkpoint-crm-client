=begin
#Checkpoint CRM API

#Checkpoint CRM API

The version of the OpenAPI document: v1
Contact: szhizhenko@sanatorium-is.ru
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.2

=end

require 'date'

module CheckpointCrmClient
  class AccountOperation
    attr_accessor :id

    attr_accessor :point_of_sale_id

    attr_accessor :account_id

    attr_accessor :external_id

    attr_accessor :name

    attr_accessor :debit

    attr_accessor :credit

    attr_accessor :debit_expirable

    attr_accessor :credit_expirable

    attr_accessor :expiration_date

    attr_accessor :order_id

    attr_accessor :rule_id

    attr_accessor :bonus_type_id

    attr_accessor :bonus_class

    attr_accessor :initiator_user

    attr_accessor :date_created

    attr_accessor :date_modified

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'point_of_sale_id' => :'point_of_sale_id',
        :'account_id' => :'account_id',
        :'external_id' => :'external_id',
        :'name' => :'name',
        :'debit' => :'debit',
        :'credit' => :'credit',
        :'debit_expirable' => :'debit_expirable',
        :'credit_expirable' => :'credit_expirable',
        :'expiration_date' => :'expiration_date',
        :'order_id' => :'order_id',
        :'rule_id' => :'rule_id',
        :'bonus_type_id' => :'bonus_type_id',
        :'bonus_class' => :'bonus_class',
        :'initiator_user' => :'initiator_user',
        :'date_created' => :'date_created',
        :'date_modified' => :'date_modified'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'point_of_sale_id' => :'Integer',
        :'account_id' => :'Integer',
        :'external_id' => :'String',
        :'name' => :'String',
        :'debit' => :'String',
        :'credit' => :'String',
        :'debit_expirable' => :'String',
        :'credit_expirable' => :'String',
        :'expiration_date' => :'Date',
        :'order_id' => :'Integer',
        :'rule_id' => :'Integer',
        :'bonus_type_id' => :'Integer',
        :'bonus_class' => :'String',
        :'initiator_user' => :'String',
        :'date_created' => :'DateTime',
        :'date_modified' => :'DateTime'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `CheckpointCrmClient::AccountOperation` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `CheckpointCrmClient::AccountOperation`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'point_of_sale_id')
        self.point_of_sale_id = attributes[:'point_of_sale_id']
      end

      if attributes.key?(:'account_id')
        self.account_id = attributes[:'account_id']
      end

      if attributes.key?(:'external_id')
        self.external_id = attributes[:'external_id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'debit')
        self.debit = attributes[:'debit']
      end

      if attributes.key?(:'credit')
        self.credit = attributes[:'credit']
      end

      if attributes.key?(:'debit_expirable')
        self.debit_expirable = attributes[:'debit_expirable']
      end

      if attributes.key?(:'credit_expirable')
        self.credit_expirable = attributes[:'credit_expirable']
      end

      if attributes.key?(:'expiration_date')
        self.expiration_date = attributes[:'expiration_date']
      end

      if attributes.key?(:'order_id')
        self.order_id = attributes[:'order_id']
      end

      if attributes.key?(:'rule_id')
        self.rule_id = attributes[:'rule_id']
      end

      if attributes.key?(:'bonus_type_id')
        self.bonus_type_id = attributes[:'bonus_type_id']
      end

      if attributes.key?(:'bonus_class')
        self.bonus_class = attributes[:'bonus_class']
      else
        self.bonus_class = 'PAYM'
      end

      if attributes.key?(:'initiator_user')
        self.initiator_user = attributes[:'initiator_user']
      end

      if attributes.key?(:'date_created')
        self.date_created = attributes[:'date_created']
      end

      if attributes.key?(:'date_modified')
        self.date_modified = attributes[:'date_modified']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @account_id.nil?
        invalid_properties.push('invalid value for "account_id", account_id cannot be nil.')
      end

      if !@external_id.nil? && @external_id.to_s.length > 64
        invalid_properties.push('invalid value for "external_id", the character length must be smaller than or equal to 64.')
      end

      if !@name.nil? && @name.to_s.length > 256
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 256.')
      end

      if !@initiator_user.nil? && @initiator_user.to_s.length > 64
        invalid_properties.push('invalid value for "initiator_user", the character length must be smaller than or equal to 64.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @account_id.nil?
      return false if !@external_id.nil? && @external_id.to_s.length > 64
      return false if !@name.nil? && @name.to_s.length > 256
      bonus_class_validator = EnumAttributeValidator.new('String', ["LVL", "PAYM"])
      return false unless bonus_class_validator.valid?(@bonus_class)
      return false if !@initiator_user.nil? && @initiator_user.to_s.length > 64
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] external_id Value to be assigned
    def external_id=(external_id)
      if !external_id.nil? && external_id.to_s.length > 64
        fail ArgumentError, 'invalid value for "external_id", the character length must be smaller than or equal to 64.'
      end

      @external_id = external_id
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if !name.nil? && name.to_s.length > 256
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 256.'
      end

      @name = name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bonus_class Object to be assigned
    def bonus_class=(bonus_class)
      validator = EnumAttributeValidator.new('String', ["LVL", "PAYM"])
      unless validator.valid?(bonus_class)
        fail ArgumentError, "invalid value for \"bonus_class\", must be one of #{validator.allowable_values}."
      end
      @bonus_class = bonus_class
    end

    # Custom attribute writer method with validation
    # @param [Object] initiator_user Value to be assigned
    def initiator_user=(initiator_user)
      if !initiator_user.nil? && initiator_user.to_s.length > 64
        fail ArgumentError, 'invalid value for "initiator_user", the character length must be smaller than or equal to 64.'
      end

      @initiator_user = initiator_user
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          point_of_sale_id == o.point_of_sale_id &&
          account_id == o.account_id &&
          external_id == o.external_id &&
          name == o.name &&
          debit == o.debit &&
          credit == o.credit &&
          debit_expirable == o.debit_expirable &&
          credit_expirable == o.credit_expirable &&
          expiration_date == o.expiration_date &&
          order_id == o.order_id &&
          rule_id == o.rule_id &&
          bonus_type_id == o.bonus_type_id &&
          bonus_class == o.bonus_class &&
          initiator_user == o.initiator_user &&
          date_created == o.date_created &&
          date_modified == o.date_modified
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, point_of_sale_id, account_id, external_id, name, debit, credit, debit_expirable, credit_expirable, expiration_date, order_id, rule_id, bonus_type_id, bonus_class, initiator_user, date_created, date_modified].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        CheckpointCrmClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
